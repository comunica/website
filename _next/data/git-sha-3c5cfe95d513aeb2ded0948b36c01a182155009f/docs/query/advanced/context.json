{"pageProps":{"frontmatter":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"body":"\nWhen passing a query to a Comunica query engine,\nyou can pass additional information to the engine using a **context** object.\n\n## 1. How to use the context\n\nWhen [querying in a JavaScript application](/docs/query/getting_started/query_app/),\nthe context must be passed as second argument to the `query()` method of a Comunica engine.\n\nFor example, a context that defines the `sources` to query over is passed as follows:\n```javascript\nconst QueryEngine = require('@comunica/query-sparql').QueryEngine;\nconst myEngine = new QueryEngine();\n\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n});\n```\n\nThe `sources` field is the only entry that is required in the context.\nAll other entries that are discussed hereafter are optional.\n\n<div class=\"note\">\nDuring query execution, the context is converted into an <a href=\"https://www.npmjs.com/package/immutable\">immutable</a> object\nto ensure that the original context entries remain unchanged during the whole query execution.\n</div>\n\n## 2. Overview\n\nThe following table gives an overview of all possible context entries that can be passed.\n\n| **Key** | **Description** |\n| ------- | --------------- |\n| `sources` | An array of data sources |\n| `destination` | A data destination for update queries |\n| `lenient` | If HTTP and parsing failures are ignored |\n| `initialBindings` | Variables that have to be pre-bound to values in the query |\n| `queryFormat` | The provided query's format |\n| `baseIRI` | Base IRI for relative IRIs in SPARQL queries |\n| `log` | A custom logger instance |\n| `datetime` | Specify a custom date |\n| `httpProxyHandler` | A proxy for all HTTP requests |\n| `httpIncludeCredentials` | (_browser-only_) If current credentials should be included for HTTP requests |\n| `httpAuth` | HTTP basic authentication value |\n| `httpTimeout` | HTTP timeout in milliseconds |\n| `httpBodyTimeout` | Makes the HTTP timeout apply until the response is fully consumed |\n| `httpRetryCount` | The number of retries to perform on failed fetch requests |\n| `httpRetryDelay` | The number of milliseconds to wait between fetch retries |\n| `httpRetryOnServerError` | If fetch should be retried on 5xx server error responses, instead of being resolved. |\n| `recoverBrokenLinks`| Use the WayBack machine to recover broken links |\n| `extensionFunctions` or `extensionFunctionCreator` | SPARQL extension functions |\n| `fetch` | A custom [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) function |\n| `readOnly` | If update queries may not be executed |\n| `explain` | The query explain mode |\n| `unionDefaultGraph` | If the default graph should also contain the union of all named graphs |\n| `localizeBlankNodes` | If blank nodes should be localized per bindings entry |\n\nWhen developing Comunica modules, all context entry keys can be found in [`@comunica/context-entries`](https://comunica.github.io/comunica/modules/_comunica_context_entries.html). \n\n## 3. Defining sources\n\nUsing the `sources` context entry, data sources can be defined that Comunica should query over.\nThe value of this must be an array, where the array may contain both strings or objects:\n* Array elements that are strings are interpreted as URLs, such as `'https://www.rubensworks.net/'` or `'https://fragments.dbpedia.org/2016-04/en'`.\n* Object array elements can be different things:\n    * A hash containing `type` and `value`, such as `{ type: 'sparql', value: 'https://dbpedia.org/sparql' }`.\n    * An [RDF/JS](/docs/query/advanced/rdfjs/) source object, such as [`new N3Store()`](https://github.com/rdfjs/N3.js#storing).\n\nString-based sources will lead to Comunica trying to determine their source type automatically.\nHash-based sources allows you to enforce a specific source type.\n\n<div class=\"note\">\nLearn more about <a href=\"/docs/query/advanced/source_types/\">all available source type</a>.\n</div>\n\n<div class=\"note\">\nSome SPARQL endpoints may be recognised as a file instead of a SPARQL endpoint due to them not supporting <a href=\"https://www.w3.org/TR/sparql11-service-description/\">SPARQL Service Description</a>,\nwhich may produce incorrect results. For these cases, the <code>sparql</code> type MUST be set.\n</div>\n\nFor example, all of the following source elements are valid:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`...`, {\n  sources: [\n    'https://fragments.dbpedia.org/2015/en',\n    { type: 'hypermedia', value: 'https://fragments.dbpedia.org/2016/en' },\n    { type: 'file', value: 'https://www.rubensworks.net/' },\n    new N3Store(),\n    { type: 'sparql', value: 'https://dbpedia.org/sparql' },\n  ],\n});\n```\n\n## 4. Defining an update destination\n\nIf you are executing an update query over more than one source,\nthen you need to specify the `destination` of the resulting update.\nMore details on this can be found in the guide on [updating in a JavaScript app](/docs/query/getting_started/update_app/).\n\n## 5. Lenient execution\n\nBy default, Comunica will throw an error when it encounters an invalid **RDF document** or **HTTP URL**.\nIt is possible to **ignore these errors** and make Comunica ignore such invalid documents and URLs\nby setting `lenient` to `true`:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  lenient: true,\n});\n```\n\n## 6. Binding variables\n\nUsing the `initialBindings` context entry, it is possible to **bind** certain variables in the given query to terms before the query execution starts.\nThis may be valuable in case your SPARQL query is used as a template with some variables that need to be filled in.\n\nThis can be done by passing an [RDF/JS `Bindings`](http://rdf.js.org/query-spec/#bindings-interface) object as value to the `initialBindings` context entry:\n```javascript\nimport { BindingsFactory } from '@comunica/bindings-factory';\nimport { DataFactory } from 'rdf-data-factory';\n\nconst DF = new DataFactory();\nconst BF = new BindingsFactory();\n\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE {\n  {?s ?p ?template1 } UNION { ?s ?p ?template2 }\n}`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  initialBindings: BF.fromRecord({\n    template1: factory.literal('Value1'),\n    template2: factory.literal('Value2'),\n  }),\n});\n```\n\n`Bindings` can be created using any [RDF/JS `BindingsFactory`](http://rdf.js.org/query-spec/#bindingsfactory-interface),\nsuch as [`@comunica/bindings-factory`](https://www.npmjs.com/package/@comunica/bindings-factory).\nLearn more about the creation of these bindings objects in the [bindings guide](/docs/query/advanced/bindings/).\n\n## 7. Setting the query format\n\nBy default, queries in Comunica are interpreted as SPARQL queries.\nAs such, the `queryFormat` entry defaults to `{ language: 'sparql', version: '1.1' }`.\n\nSince Comunica is not tied to any specific **query format**, it is possible to change this to something else, such as `{ language: 'graphql', version: '1.0' }`.\nMore information on this can be found in the [GraphQL-LD guide](/docs/query/advanced/graphql_ld/).\n\n## 8. Setting a Base IRI\n\nTerms in SPARQL queries can be relative to a certain **Base IRI**.\nTypically, you would use the `BASE` keyword in a SPARQL query to set this Base IRI.\nIf you want to set this Base IRI without modifying the query,\nthen you can define it in the context using `baseIRI`:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE {\n  ?s </relative> ?o\n}`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  baseIRI: 'http://example.org/',\n});\n```\n\n## 9. Enabling a logger\n\nA logger can be set using `log`.\nMore information on this can be found in the [logging guide](/docs/query/advanced/logging/).\n\n## 10. Setting a custom date\n\nUsing `datetime`, a custom **date** can be set in Comunica.\nThe range of this field must always be a JavaScript `Date` object:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  date: new Date(),\n});\n```\n\nThis date is primarily used for the SPARQL `NOW()` operator.\nIt is also used when performing time travel querying using the [Memento protocol](/docs/query/advanced/memento/).\n\n## 11. Enabling an HTTP proxy\n\nAll HTTP requests can be run through a proxy using `httpProxyHandler`.\nMore information on this can be found in the [HTTP proxy guide](/docs/query/advanced/proxying/).\n\n## 12. Include credentials in HTTP requests\n\n_Only applicable when running in the browser_\n\nIf this option is enabled, then all cross-site requests will be made using credentials of the current page.\nThis includes cookies, authorization headers or TLS client certificates.\n\nEnabling this option has no effect on same-site requests.\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpIncludeCredentials: true,\n});\n```\n\n## 13. Send requests via HTTP basic authentication\n\nVia HTTP Basic Authentication one can include **username and password** credentials in HTTP requests.\nMore information on this can be found in the [HTTP basic authentication guide](/docs/query/advanced/basic_auth/).\n\n## 14. SPARQL extension functions\n\nSPARQL allows non-standard, [custom extension functions](https://www.w3.org/TR/sparql11-query/#extensionFunctions) to be used within queries.\nIn order to provide an implementation to these extension functions,\nComunica allows developers to plug them in via the context.\nMore information on this can be found in the [SPARQL extension functions guide](/docs/query/advanced/extension_functions/).\n\n## 15. Using a custom fetch function\n\nBy default, Comunica will use the built-in [`fetch` function](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API) to make HTTP requests.\nIt is however possible to pass a custom function that will be used instead for making HTTP requests,\nas long as it follows the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n\nThis can be done as follows:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  fetch: myfetchFunction,\n});\n```\n\n_If you want to perform authenticated HTTP requests for Solid, you may want to consider using [Comunica Solid](https://comunica.dev/docs/query/advanced/solid/)._\n\n\n## 16. HTTP Timeout\n\nBy default Communica does not apply any timeout on the HTTP requests done to external services. It is possible to add a timeout using the `httpTimeout` option which value is the timeout delay in milliseconds. For example to add an HTTP timeout of 60s:\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpTimeout: 60_000,\n});\n```\n\nIt is also possible to make this timeout not only apply until the response starts streaming in but until the response body is fully consumed using the `httpBodyTimeout` boolean option. It is useful to limit cases like very long response streams:\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpTimeout: 60_000,\n  httpBodyTimeout: true\n});\n```\n\n## 17. Union Default Graph\n\nBy default, Comunica will only query over the [default graph](https://www.w3.org/TR/sparql11-query/#unnamedGraph).\nIf you want to query over triples in other named graphs, you need to specify this via the `GRAPH`, `FROM`, or `FROM NAMED` clauses.\nHowever, by setting the `unionDefaultGraph` context option to `true`, triples patterns will also apply to triples in the non-default graph. \n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  unionDefaultGraph: true,\n});\n```\n\n## 18. HTTP Retries\n\nUsing the `httpRetryOnServerError`, `httpRetryCount`, and `httpRetryDelay` options,\nyou can make your engine retry requests for a number of times if the server produces an error for it.\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['https://fragments.dbpedia.org/2015/en'],\n  httpRetryOnServerError: true,\n  httpRetryCount: 3,\n  httpRetryDelay: 100,\n});\n```\n\n## 19. Broken link recovery\n\nThe `recoverBrokenLinks` option can make your engine fall back to the [WayBack Machine](https://archive.org/web/) if a document has become unavailable.\n\n```javascript\nconst bindingsStream = await myEngine.queryBindings(`SELECT * WHERE { ?s ?p ?o }`, {\n  sources: ['http://xmlns.com/foaf/spec/20140114.rdf'],\n  recoverBrokenLinks: true,\n});\n```\n","excerpt":"","path":"/docs/query/advanced/context","paths":["/about/","/ask/","/association/","/association/board/","/association/bounty_process/","/blog/","/blog/2020-08-19-intro/","/blog/2020-08-24-release_1_16/","/blog/2020-09-25-release_1_17/","/blog/2020-11-02-release_1_18/","/blog/2021-01-18-release_1_19/","/blog/2021-03-30-release_1_20/","/blog/2021-04-27-release_1_21/","/blog/2021-06-21-comunica_association_bounties/","/blog/2021-08-30-release_1_22/","/blog/2021-11-08-comunica_association_members/","/blog/2022-03-03-release_2_0/","/blog/2022-06-29-release_2_3/","/blog/2022-07-14-association_launch/","/blog/2022-08-24-release_2_4/","/blog/2022-11-09-release_2_5/","/blog/2023-05-24-release_2_7/","/blog/2023-07-04-release_2_8/","/blog/2024-03-19-release_3_0/","/blog/2024-05-11-release_3_1/","/contribute/","/docs/","/docs/query/","/docs/query/getting_started/","/docs/query/getting_started/query_cli/","/docs/query/getting_started/update_cli/","/docs/query/getting_started/query_cli_file/","/docs/query/getting_started/query_app/","/docs/query/getting_started/update_app/","/docs/query/getting_started/query_browser_app/","/docs/query/getting_started/query_docker/","/docs/query/getting_started/setup_endpoint/","/docs/query/getting_started/setup_web_client/","/docs/query/getting_started/query_dev_version/","/docs/query/usage/","/docs/query/faq/","/docs/query/advanced/","/docs/query/advanced/basic_auth/","/docs/query/advanced/bindings/","/docs/query/advanced/caching/","/docs/query/advanced/context/","/docs/query/advanced/destination_types/","/docs/query/advanced/explain/","/docs/query/advanced/extension_functions/","/docs/query/advanced/federation/","/docs/query/advanced/graphql_ld/","/docs/query/advanced/hdt/","/docs/query/advanced/logging/","/docs/query/advanced/memento/","/docs/query/advanced/proxying/","/docs/query/advanced/rdfjs/","/docs/query/advanced/rdfjs_querying/","/docs/query/advanced/rdfjs_updating/","/docs/query/advanced/result_formats/","/docs/query/advanced/solid/","/docs/query/advanced/source_types/","/docs/query/advanced/sparql_query_types/","/docs/query/advanced/specifications/","/docs/modify/","/docs/modify/getting_started/","/docs/modify/getting_started/custom_config_cli/","/docs/modify/getting_started/custom_config_app/","/docs/modify/getting_started/custom_init/","/docs/modify/getting_started/custom_web_client/","/docs/modify/getting_started/contribute_actor/","/docs/modify/getting_started/actor_parameter/","/docs/modify/extensions/","/docs/modify/faq/","/docs/modify/advanced/","/docs/modify/advanced/actor_patterns/","/docs/modify/advanced/algebra/","/docs/modify/advanced/architecture_core/","/docs/modify/advanced/architecture_sparql/","/docs/modify/advanced/browser_builds/","/docs/modify/advanced/buses/","/docs/modify/advanced/componentsjs/","/docs/modify/advanced/custom_cli_arguments/","/docs/modify/advanced/expression-evaluator/","/docs/modify/advanced/hypermedia/","/docs/modify/advanced/joins/","/docs/modify/advanced/logging/","/docs/modify/advanced/mediators/","/docs/modify/advanced/metadata/","/docs/modify/advanced/observers/","/docs/modify/advanced/query_operation_result_types/","/docs/modify/advanced/rdf_parsing_serializing/","/docs/modify/advanced/sparqlee/","/docs/modify/advanced/testing/","/docs/modify/benchmarking/","/events/","/events/2019-06-03-eswc/","/events/2019-10-26-iswc/","/events/2022-09-07-association_launch/","/events/2022-09-13-semantics_conference/","/logos/","/research/","/research/amf/","/research/link_traversal/","/research/versioning/","/roadmap/"],"mattersData":{"/about/":{"title":"About","description":"Learn more about Comunica."},"/ask/":{"title":"Ask","description":"Ask questions about Comunica."},"/association/":{"title":"Comunica Association","description":"Organization for ensuring the maintenance and development of the Comunica"},"/association/board/":{"title":"Board of Directors","description":"The board makes decisions regarding the Comunica Association"},"/association/bounty_process/":{"title":"Bounty Procedures","description":"The process for handling bounties on issues"},"/blog/":{"title":"Blog","description":"Blog posts, containing announcements or other news.","blog_index":true},"/blog/2020-08-19-intro/":{"title":"A New Website for Comunica","excerpt":"\nWe're happy to present a brand new website for Comunica! 🎉\n_Don't know that Comunica is? [Read about it here](/about/)._\n\nThis new version contains all **basic information** around Comunica.\nAdditionally, it contains **guides** on how to [query with Comunica](/docs/query/),\nand how to [modify or extend it](/docs/modify/). \n\n"},"/blog/2020-08-24-release_1_16/":{"title":"Release 1.16.0: Full spec compliance, property paths, CSV/TSV, basic auth, and fixes","excerpt":"\nWith the latest release of Comunica, we have achieved the major milestone of **full compliance to the SPARQL 1.1 specification**.\nWhile Comunica has had support for all SPARQL 1.1 operators for a while,\nsome small parts were not always fully handled according to the spec,\nand property paths were not fully supported.\n\nThanks to the help of several students over the summer, these issues have been resolved,\nand all tests from [the SPARQL 1.1 test suite](https://w3c.github.io/rdf-tests/sparql11/) now pass.\n\n"},"/blog/2020-09-25-release_1_17/":{"title":"Hacktoberfest and Release 1.17.0","excerpt":"\nIn this post, we give an overview of\ncontribution possibilities during [Hacktoberfest](https://hacktoberfest.digitalocean.com/),\nand the newly released 1.17.0 version. \n\n"},"/blog/2020-11-02-release_1_18/":{"title":"Release 1.18.0: Smaller Web bundles and Microdata parsing","excerpt":"\nThis post gives a brief overview of the new 1.18.0 release.\n\n"},"/blog/2021-01-18-release_1_19/":{"title":"Release 1.19.0: Simplifications for extensions","excerpt":"\nThe 1.19.0 release focuses on simplications for developing Comunica extension.\nIt contains no significant fixes or changes for end-users.\n\n"},"/blog/2021-03-30-release_1_20/":{"title":"Release 1.20.0: SPARQL Update support","excerpt":"\nWith this new 1.20.0 release, we bring support for [SPARQL Update](https://www.w3.org/TR/sparql11-update/) queries to Comunica.\nNext to this, several enhancements were made to improve developer experience,\nminor new features, and important bug fixes.\n\n"},"/blog/2021-04-27-release_1_21/":{"title":"Release 1.21.0: Hypermedia-based SPARQL Updating","excerpt":"\nThe 1.21.0 version is a smaller release,\nthat mainly introduces the necessary wiring to enable hypermedia-driven SPARQL update querying,\nwhich lays the foundations for highly flexible updating of heterogeneous destinations, such as Solid data pods.\n\nIn other words, this provides the necessary ✨_magic_✨ for updating many different types of things.  \n\n"},"/blog/2021-06-21-comunica_association_bounties/":{"title":"Announcing the Comunica Association, and a Bounty Program","excerpt":"\nIn this post, we announce the creation of the [Comunica Association](/association/),\nand the introduction of a new bounty system using which **organizations** and companies\ncan **fund development** of new features and the fixing of bugs,\nand through which **developers** can take up these bounties and **get paid**.\n\n"},"/blog/2021-08-30-release_1_22/":{"title":"Release 1.22.0: Improved update support, extension functions, and improved CLI handling","excerpt":"\nThe 1.22.0 version features some major additions, and a bunch of smaller internal fixes and performance improvements 🚀!\nThe primary changes that are discussed in this post are\nsupport for more SPARQL update destination types,\nSPARQL extension functions,\nand rewritten CLI handling.\n\n"},"/blog/2021-11-08-comunica_association_members/":{"title":"Comunica Association Memberships","excerpt":"\n[Earlier this year](/blog/2021-06-21-comunica_association_bounties/),\nwe announced the [Comunica Association](/association/),\nwhich is a non-profit organization that aims to make Comunica sustainable in the long term.\nIn this post, we announce the possibility to become a _member_ or _sponsor_ to the association,\nallowing organizations to drive the future roadmap of Comunica.\nWe plan an **official launch in fall 2022**, up until when organizations can choose\nto become a **founding member** of the Comunica Association.\n\n"},"/blog/2022-03-03-release_2_0/":{"title":"Release 2.0.0: A new major release with radical simplifications and performance improvements","excerpt":"\nSince its initial release a couple of years ago, Comunica has grown a lot,\nbut it has always remained fully backwards-compatible with every update.\nHowever, as with every software project, there is sometimes a need to make breaking changes\nso that old mechanisms can be replaced with better, newer ones.\nWith this update, we have aggregated several breaking changes into one large update,\nall of which should improve the lives of users one way or another.\nBelow, the primary changes are listed.\n\n"},"/blog/2022-06-29-release_2_3/":{"title":"Release 2.3.0: Better timeout support and minor enhancements","excerpt":"\nIt's been a while since our latest blog post,\nso here's a small announcement on the latest 2.3.0 release.\n\n"},"/blog/2022-07-14-association_launch/":{"title":"Official launch of the Comunica Association","excerpt":"\nAs previously announced, we will be officially launching the Comunica Association during the fall of this year.\nMore concretely, we are organizing an online launch event on the 7th of September,\nand we will be physically present at the Semantics conference in Vienna the week afterwards.\n\n"},"/blog/2022-08-24-release_2_4/":{"title":"Release 2.4.0: Better browser support and performance improvements","excerpt":"\nWe just released a new minor version of Comunica.\nHere's an overview of the main changes.\n\n"},"/blog/2022-11-09-release_2_5/":{"title":"Release 2.5.0: Fixes, string sources, and HTTP error handling","excerpt":"\nWe just released a new small update. Here's an overview of the main changes.\n\n"},"/blog/2023-05-24-release_2_7/":{"title":"Release 2.7.0: Better date support, better performance over SPARQL endpoints, and internal fixes","excerpt":"\nToday, we released a new minor update, which brings exciting new features, performance improvements, and bug fixes.\nBelow, you can find an overview of the main changes.\n\n"},"/blog/2023-07-04-release_2_8/":{"title":"Release 2.8.0: Support for quoted triples (RDF-star and SPARQL-star)","excerpt":"\nThis minor release focuses on a single but significant new feature: support for quoted triples.\n\n"},"/blog/2024-03-19-release_3_0/":{"title":"Release 3.0: 🔥 Blazingly fast federation over heterogeneous sources","excerpt":"\nMore than 2 years ago, we released [Comunica version 2.0](/blog/2022-03-03-release_2_0/),\nwhich featured many internal and external API changes that significantly simplified its usage.\nToday, we release version 3.0, which focuses more on internal changes, with limited changes to the external API.\nMost of the changes relate to the handling of data sources during query planning,\nwhich allows **more efficient query plans to be produced when querying over federations of heterogeneous sources**.\nThis means that for people using Comunica, the number of breaking changes in this update are very limited.\nThings will simplify be faster in general, and some small convenience features have been added,\nsuch as results being [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols). \nTo developers extending Comunica with custom actors, there will be some larger breaking changes.\n\n"},"/blog/2024-05-11-release_3_1/":{"title":"Release 3.1: 🌱 New package with tiny bundle size","excerpt":"\nThe primary addition in this release is the new [`@comunica/query-sparql-rdfjs-lite`](https://www.npmjs.com/package/@comunica/query-sparql-rdfjs-lite) package,\nwhich is optimized for small browser bundle size.\nCurrently, the minified size of this package is 648,88 KB (145,79 KB when gzipped).\nThis is about as small as you can get without removing required functionality from the SPARQL 1.1 spec\nBut if you don't need everything from SPARQL 1.1, it could get much smaller even!\n\n"},"/contribute/":{"title":"Contribute","description":"Contribute to the development of Comunica."},"/docs/":{"title":"Documentation","description":"Overview of all Comunica documentation.","index":true},"/docs/query/":{"title":"Query with Comunica","description":"Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.","index":true},"/docs/query/getting_started/":{"title":"Getting started with querying","description":"Basic guides on how to easily get started with querying.","index":true},"/docs/query/getting_started/query_cli/":{"title":"Querying from the command line","description":"Execute SPARQL queries directly from the command line."},"/docs/query/getting_started/update_cli/":{"title":"Updating from the command line","description":"Execute SPARQL Update queries directly from the command line."},"/docs/query/getting_started/query_cli_file/":{"title":"Querying local files from the command line","description":"Execute SPARQL queries over local RDF files directly from the command line."},"/docs/query/getting_started/query_app/":{"title":"Querying in a JavaScript app","description":"Execute SPARQL queries from within your application using the JavaScript API."},"/docs/query/getting_started/update_app/":{"title":"Updating in a JavaScript app","description":"Execute SPARQL Update queries from within your application using the JavaScript API."},"/docs/query/getting_started/query_browser_app/":{"title":"Querying in a JavaScript browser app","description":"Execute SPARQL queries from within your client-side browser application using the JavaScript API."},"/docs/query/getting_started/query_docker/":{"title":"Querying from a Docker container","description":"Execute SPARQL queries within a Docker container."},"/docs/query/getting_started/setup_endpoint/":{"title":"Setting up a SPARQL endpoint","description":"Allow querying over HTTP via the SPARQL protocol"},"/docs/query/getting_started/setup_web_client/":{"title":"Setting up a Web client","description":"Set up a user-friendly static Web page where SPARQL queries can be executed client-side"},"/docs/query/getting_started/query_dev_version/":{"title":"Query using the latest development version","description":"If you want to make use of the latest changes that are not released yet"},"/docs/query/usage/":{"title":"Usage showcase","description":"Examples of where Comunica is used."},"/docs/query/faq/":{"title":"Querying FAQ","description":"Frequently asked questions about using Comunica."},"/docs/query/advanced/":{"title":"Advanced querying","description":"Advanced guides on how to get the most out of Comunica.","index":true},"/docs/query/advanced/basic_auth/":{"title":"HTTP Basic Authentication","description":"Send authenticated HTTP requests by including username and password."},"/docs/query/advanced/bindings/":{"title":"Bindings","description":"Bindings objects are used to represent results of SPARQL SELECT queries"},"/docs/query/advanced/caching/":{"title":"Caching","description":"When remote sources are requested, caching allows them to be reused in the future."},"/docs/query/advanced/context/":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"/docs/query/advanced/destination_types/":{"title":"Destination types","description":"Comunica detects and handles different types of destinations."},"/docs/query/advanced/explain/":{"title":"Explain","description":"Display information about the logical and physical query plan"},"/docs/query/advanced/extension_functions/":{"title":"Extension Functions","description":"Providing implementations for SPARQL extension functions."},"/docs/query/advanced/federation/":{"title":"Federated Querying","description":"Query over the union of data within any number of sources"},"/docs/query/advanced/graphql_ld/":{"title":"GraphQL-LD","description":"Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica"},"/docs/query/advanced/hdt/":{"title":"HDT","description":"HDT offers highly compressed immutable RDF storage."},"/docs/query/advanced/logging/":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"/docs/query/advanced/memento/":{"title":"Memento","description":"Using the Memento protocol, time travel queries can be executed."},"/docs/query/advanced/proxying/":{"title":"HTTP Proxy","description":"All HTTP requests can optionally go through a proxy."},"/docs/query/advanced/rdfjs/":{"title":"RDF/JS","description":"To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications."},"/docs/query/advanced/rdfjs_querying/":{"title":"Querying over RDF/JS sources","description":"If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/rdfjs_updating/":{"title":"Updating RDF/JS stores","description":"If the built-in destination types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/result_formats/":{"title":"Result formats","description":"Query results can be serialized in different formats."},"/docs/query/advanced/solid/":{"title":"Solid","description":"Solid – the Web-based decentralization ecosystem – can be queried with Comunica."},"/docs/query/advanced/source_types/":{"title":"Source types","description":"Comunica detects and handles different types of sources."},"/docs/query/advanced/sparql_query_types/":{"title":"SPARQL query types","description":"Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ..."},"/docs/query/advanced/specifications/":{"title":"Supported specifications","description":"Comunica supports several RDF-related specifications"},"/docs/modify/":{"title":"Modify Comunica","description":"Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.","index":true},"/docs/modify/getting_started/":{"title":"Getting started with modification","description":"Basic guides on how to easily get started with Comunica modification.","index":true},"/docs/modify/getting_started/custom_config_cli/":{"title":"Querying with a custom configuration from the command line","description":"Create a custom configuration of Comunica modules with reduced features, and query with it from the command line."},"/docs/modify/getting_started/custom_config_app/":{"title":"Querying with a custom configuration in a JavaScript app","description":"Create a custom configuration of Comunica modules with changed features, and query with it from within your application using the JavaScript API."},"/docs/modify/getting_started/custom_init/":{"title":"Exposing your custom config as an npm package","description":"Wrap your config in an npm package, and expose a CLI tool and a JavaScript API."},"/docs/modify/getting_started/custom_web_client/":{"title":"Exposing your custom config in a Web client","description":"Demonstrate your query engine as a static Web page."},"/docs/modify/getting_started/contribute_actor/":{"title":"Contributing a new query operation actor to the Comunica repository","description":"Setup a development environment, implement a new actor, and create a pull request."},"/docs/modify/getting_started/actor_parameter/":{"title":"Adding a config parameter to an actor","description":"For an existing actor, add a parameter that can be customized in the config file."},"/docs/modify/extensions/":{"title":"Extensions","description":"Existing extensions of Comunica."},"/docs/modify/faq/":{"title":"Modify FAQ","description":"Frequently asked question about Comunica modification."},"/docs/modify/advanced/":{"title":"Advanced modification","description":"Advanced guides on how to get the most out of Comunica modification.","index":true},"/docs/modify/advanced/actor_patterns/":{"title":"Actor Patterns","description":"Overview of common design patterns for actors"},"/docs/modify/advanced/algebra/":{"title":"Algebra","description":"The internal representation of queries during query execution."},"/docs/modify/advanced/architecture_core/":{"title":"Core Architecture","description":"The low-level software architecture of Comunica for achieving modularity."},"/docs/modify/advanced/architecture_sparql/":{"title":"SPARQL Architecture","description":"The high-level software architecture of Comunica for implementing SPARQL."},"/docs/modify/advanced/browser_builds/":{"title":"Browser builds","description":"All modules in Comunica can be built for the browser."},"/docs/modify/advanced/buses/":{"title":"Buses and Actors","description":"An overview of all buses in Comunica and their actors."},"/docs/modify/advanced/componentsjs/":{"title":"Components.js","description":"Components.js is the dependency injection framework that Comunica uses to wire components via config files."},"/docs/modify/advanced/custom_cli_arguments/":{"title":"Custom CLI arguments","description":"Adding custom arguments to CLI tools"},"/docs/modify/advanced/expression-evaluator/":{"title":"Expression Evaluator","description":"The expression evaluation engine of Comunica."},"/docs/modify/advanced/hypermedia/":{"title":"Hypermedia","description":"Discovery of data source capabilities during query execution."},"/docs/modify/advanced/joins/":{"title":"Joins","description":"Overview of how join operations are handled during query planning"},"/docs/modify/advanced/logging/":{"title":"Logging","description":"How to log messages from within actors."},"/docs/modify/advanced/mediators/":{"title":"Mediators","description":"An overview of all mediators in Comunica."},"/docs/modify/advanced/metadata/":{"title":"Metadata","description":"Information for adaptive planning of query operations."},"/docs/modify/advanced/observers/":{"title":"Observers","description":"Passively observe actions executed by actors on a given bus."},"/docs/modify/advanced/query_operation_result_types/":{"title":"Query operation result types","description":"An overview of the different output types for query operations."},"/docs/modify/advanced/rdf_parsing_serializing/":{"title":"RDF Parsing and Serializing","description":"Basic concepts behind parsing and serializing RDF."},"/docs/modify/advanced/sparqlee/":{"title":"Sparqlee","description":"The SPARQL expression evaluation engine of Comunica. (DEPRECATED)"},"/docs/modify/advanced/testing/":{"title":"Testing","description":"The unit and integration tests that lead to a more stable codebase."},"/docs/modify/benchmarking/":{"title":"Benchmarking","description":"Guidelines on running experiments with Comunica."},"/events/":{"title":"Events","description":"Overview of all Comunica-related events.","index":true,"reverse":true},"/events/2019-06-03-eswc/":{"title":"2019-06-03: Tutorial at ESWC 2019","description":"Comunica tutorial at the ESWC 2019 conference"},"/events/2019-10-26-iswc/":{"title":"2019-10-26: Tutorial at ISWC 2019","description":"Comunica and Solid tutorial at the ISWC 2019 conference"},"/events/2022-09-07-association_launch/":{"title":"2022-09-07: Comunica Association Launch","description":"An online event for the official launch of the Comunica Association"},"/events/2022-09-13-semantics_conference/":{"title":"2022-09-13/15: Semantics Conference","description":"The Comunica Association will have a booth and talk at the Semantics Conference in Vienna"},"/logos/":{"title":"Logos","description":"Free to use logos of Comunica."},"/research/":{"title":"Research","description":"An overview of these research surrounding Comunica."},"/research/amf/":{"title":"Approximate Membership Functions","description":"An overview of research that has been done on AMFs during query execution."},"/research/link_traversal/":{"title":"Link Traversal","description":"An overview of research that has been done on Link-Traversal-based Query Processing."},"/research/versioning/":{"title":"Versioning","description":"An overview of research that has been done on Query Processing for RDF archives."},"/roadmap/":{"title":"Roadmap","description":"The long-term goals of Comunica"}}},"__N_SSG":true}