{"pageProps":{"frontmatter":{"title":"Expression Evaluator","description":"The expression evaluation engine of Comunica."},"body":"\nThe expression evaluator package of Comunica is used by different Comunica actors for evaluating expressions.\n\nConcretely, the following actors make use of this:\n* [`@comunica/actor-query-operation-extend`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-extend): Implements the extent operator.\n* [`@comunica/actor-query-operation-filter-sparqlee`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-filter-sparqlee): Implements the filter operator.\n* [`@comunica/actor-query-operation-group`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-group): Implements the group operator.\n* [`@comunica/actor-query-operation-leftjoin`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-leftjoin): Implements the left join operator.\n* [`@comunica/actor-query-operation-orderby-sparqlee`](https://github.com/comunica/comunica/tree/master/packages/actor-query-operation-extend): Implements the order by operator.\n\n## Using The Expression Evaluator\n\n```ts\nimport { translate } from \"sparqlalgebrajs\";\nimport { stringToTerm } from \"rdf-string\";\n\n// An example SPARQL query with an expression in a FILTER statement.\n// We translate it to SPARQL Algebra format ...\nconst query = translate(`\n  SELECT * WHERE {\n     ?s ?p ?o\n     FILTER langMatches(lang(?o), \"FR\")\n    }\n`);\n\n// ... and get the part corresponding to \"langMatches(...)\".\nconst expression = query.input.expression;\n\n// We create an evaluator for this expression.\n// A sync version exists as well.\nconst evaluator = new AsyncEvaluator(expression);\n\n// We can now evaluate some bindings as a term, ...\nconst result: RDF.Term = await evaluator.evaluate(\n  Bindings({\n    ...\n    '?o': stringToTerm(\"Ceci n'est pas une pipe\"@fr),\n    ...\n  })\n);\n\n// ... or as an Effective Boolean Value (e.g. for use in FILTER)\nconst result: boolean = await evaluator.evaluateAsEBV(bindings);\n```\n\n## Config\n\nThe expression evaluator accepts an optional config argument, that is not required for simple use cases,\nbut for feature completeness and spec compliance it should receive `now, baseIRI, exists, aggregate and bnode`.\n\nFor the extended date functionality (see later), an additional context item has been added: `implicitTimezone`.\nThe choice was made to default to the timezone `now` has.\nIt can be desired to set it explicitly so `implicitTimezone` does not change over time (i.e., it is not dependent on daylight saving time).\n\n```ts\ninterface AsyncEvaluatorContext {\n  now?: Date;\n  baseIRI?: string;\n\n  exists?: (expression: Alg.ExistenceExpression, mapping: Bindings) => Promise<boolean>;\n  aggregate?: (expression: Alg.AggregateExpression) => Promise<RDF.Term>;\n  bnode?: (input?: string) => Promise<RDF.BlankNode>;\n  extensionFunctionCreator?: (functionNamedNode: RDF.NamedNode) => (args: RDF.Term[]) => Promise<RDF.Term> | undefined;\n  overloadCache?: LRUCache<string, SomeInternalType>;\n  typeCache?: LRUCache<string, SomeInternalType>;\n  getSuperType?: (unknownType: string) => string;\n  implicitTimezone?: { zoneHours: number; zoneMinutes: number;}; \n}\n```\n\n## Errors\n\nThis package exports an Error class called `ExpressionError` from which all SPARQL related errors inherit.\nThese might include unbound variables, wrong types, invalid lexical forms, and much more.\nThese errors can be caught, and may impact program execution in an expected way.\nAll other errors are unexpected, and are thus programmer mistakes or mistakes in this package.\n\nThere is also the utility function `isExpressionError` for detecting these cases.\n\n```ts\n// Make sure to catch errors if you don't control binding input\ntry {\n  const result = await evaluator.evaluate(bindings);\n  consumeResult(result);\n} catch (error) {\n  if (isExpressionError(error)) {\n    console.log(error); // SPARQL related errors\n    ...                 // Move on, ignore result, ...\n  } else {\n    throw error;        // Programming errors or missing features.\n  }\n}\n```\n\n## Exists\n\n'Exists' operations are an annoying problem to tackle in the context of an expression evaluator,\nsince they make the operation stateful and context dependant.\nThey might span entire streams and, depending on the use case, have very different requirements for speed and memory consumption.\nThis package has therefore decided to delegate this responsibility back to you.\n\nYou can, if you want, pass hooks to the evaluators of the shape:\n\n```ts\nexists?: (expression: Alg.ExistenceExpression, mapping: Bindings) => Promise<boolean>;\n```\n\nIf this package encounters any or existence expression, it will call this hook with the relevant information, so you can resolve it yourself.\nIf these hooks are not present, but an existence expression is encountered, then an error is thrown.\n\nAn example consumer/hook can be found in [Comunica](https://github.com/comunica/comunica/blob/master/packages/actor-query-operation-filter-sparqlee/lib/ActorQueryOperationFilterSparqlee.ts).;\n\n## Aggregates\n\nAn `AggregateEvaluator` to which you can pass the individual bindings in the stream, and ask the aggregated result back, is provided.\nIt uses the internal type system for operations such as `sum` and `avg`.\n\n```ts\nconst stream = [bindings1, bindings2, bindings3];\n\nif (stream.length === 0) {\n  return AggregateEvaluator.emptyValue(aggregateExpression);\n} else {\n  const evaluator = new AggregateEvaluator(aggregateExpression, bindings[0]);\n  stream.slice(1).forEach((bindings) => evaluator.put(bindings));\n  return evaluator.result();\n}\n```\n\nWe have not found any SPARQL Algebra for which this occurs,\nbut we happen to find any aggregate expressions nested in the expression (or even at the top level),\nwe will call (similarly to EXISTS) an aggregate hook you might have provided.\n\n```ts\naggregate?: (expression: Alg.AggregateExpression) => Promise<RDF.Term>;\n```\n\nYou can probably ignore this.\n\nWe also provide an `AsyncAggregateEvaluator` to that works the same way `AggregateEvaluator` does.\nThe signature of only the `put` method changes to be async. It is up to you to handle this correctly.\nYou are for example expected to await all puts before you ask for `result`.\nYou should also note the order of calling and awaiting put while using the `GroupConcat` aggregator.\n\n## Extension functions\n\nThis section explains how to pass extension functions to the evaluator.\nYou don't need to do this directly. If you want to provide extension function to a\nComunica engine follow the [extension function docs](https://comunica.dev/docs/query/advanced/extension_functions/).\n\nExtension functions can be added by providing the `extensionFunctionCreator` in the config.\nExample\n```ts\nconfig.extensionFunctionCreator = (functionName: RDF.NamedNode) => {\n   if (functionNamedNode.value === 'https://example.org/functions#equal') {\n      return async (args: RDF.Term[]) => {\n         return literal(String(args[0].equals(args[1])), 'http://www.w3.org/2001/XMLSchema#boolean');       \n      }\n   }\n}\n```\n\n## Overload function caching\n\nAn functionArgumentsCache allows the partial evaluator to cache the implementation of a function provided the argument types.\nWhen not providing a cache in the context, the evaluator will create one.\n\nThis cache can be reused across multiple evaluators. Manual modification is not recommended.\n\n## Context dependant functions\n\nSome functions (BNODE, NOW, IRI) need a (stateful) context from the caller to function correctly according to the spec.\nThis context can be passed as an argument to the evaluator (see the [config section](#config) for exact types).\nIf they are not passed, the evaluator will use a naive implementation that might do the trick for simple use cases.\n\n### BNODE\n\n[spec](https://www.w3.org/TR/sparql11-query/#func-bnode)\n\nBlank nodes are very dependent on the rest of the SPARQL query, therefore,\nwe provide the option of delegating the entire responsibility back to you by accepting a blank node constructor callback.\nIf this is not found, we create a blank node with the given label,\nor we use uuid (v4) for argument-less calls to generate definitely unique blank nodes of the shape `blank_uuid`.\n\n`bnode(input?: string) => RDF.BlankNode`\n\n### Now\n\n[spec](https://www.w3.org/TR/sparql11-query/#func-now)\n\nAll calls to now in a query must return the same value, since we aren't aware of the rest of the query,\nyou can provide a timestamp (`now: Date`). If it's not present, the evaluator will use the timestamp of evaluator creation,\nthis at least allows evaluation with multiple bindings to have the same `now` value.\n\n### IRI\n\n[spec](https://www.w3.org/TR/sparql11-query/#func-iri)\n\nTo be fully spec compliant, the IRI/URI functions should take into account base IRI of the query,\nwhich you can provide as `baseIRI: string` to the config.\n\n## SPARQL 1.2\n\nThe partial evaluator package looks already implements some SPARQL 1.2 specification functions.\n\nCurrently, this is restricted to the [extended date](https://github.com/w3c/sparql-12/blob/main/SEP/SEP-0002/sep-0002.md) functionality.\nPlease note that the new sparql built-in `ADJUST` function has not been implemented due to package dependencies.\n\n## Type System\n\nThe type system of the partial evaluator is tailored for doing (supposedly) quick evaluation of overloaded functions.\n\nA function definition object consists of a tree-like structure with a type (e.g. `xsd:float`) at each internal node.\nEach level of the tree represents an argument of the function\n(e.g. function with arity two also has a tree of depth two).\nThe leaves contain a function implementation matching the concrete types defined by the path of the tree.\n\nWhen a function is called with some arguments, a depth first search,\nto find an implementation among all overloads matching the types of the arguments,\nis performed in the tree.\n\n**[Subtype substitution](https://www.w3.org/TR/xpath-31/#dt-subtype-substitution)** is handled for literal terms.\nWhat this means is that for every argument of the function, and it's associated accepted type,\nWhen a function accepts a type, it also accepts all subtypes for that argument.\nThese sub/super-type relations define the following type tree:\n\n<div class=\"docs-intro-img\">\n  <img src=\"/img/expression-evaluator-type-scheme.svg\" alt=\"Type scheme known by expression evaluator\" style=\"width:100%\" \\>\n</div>\n\nSo, when expecting an argument of type `xsd:integer` we could provide `xsd:long` instead and the\nfunction call would still succeed. The type of the term does not change in this operation.\n\nThe expression evaluator also handles **[type promotion](https://www.w3.org/TR/xpath-31/#promotion)**.\nType promotion defines some rules where a types can be promoted to another, even if there is no super-type relation.\nExamples include `xsd:float`  and `xsd:decimal` to `xsd:double`and `xsd:anyURI` to `xsd:string`.\nIn this case, the datatype of the term will change to the type it is promoted to.\n\n","excerpt":"","path":"/docs/modify/advanced/expression-evaluator","paths":["/about/","/ask/","/association/","/association/board/","/association/bounty_process/","/blog/","/blog/2020-08-19-intro/","/blog/2020-08-24-release_1_16/","/blog/2020-09-25-release_1_17/","/blog/2020-11-02-release_1_18/","/blog/2021-01-18-release_1_19/","/blog/2021-03-30-release_1_20/","/blog/2021-04-27-release_1_21/","/blog/2021-06-21-comunica_association_bounties/","/blog/2021-08-30-release_1_22/","/blog/2021-11-08-comunica_association_members/","/blog/2022-03-03-release_2_0/","/blog/2022-06-29-release_2_3/","/blog/2022-07-14-association_launch/","/blog/2022-08-24-release_2_4/","/blog/2022-11-09-release_2_5/","/blog/2023-05-24-release_2_7/","/blog/2023-07-04-release_2_8/","/blog/2024-03-19-release_3_0/","/blog/2024-05-11-release_3_1/","/contribute/","/docs/","/docs/query/","/docs/query/getting_started/","/docs/query/getting_started/query_cli/","/docs/query/getting_started/update_cli/","/docs/query/getting_started/query_cli_file/","/docs/query/getting_started/query_app/","/docs/query/getting_started/update_app/","/docs/query/getting_started/query_browser_app/","/docs/query/getting_started/query_docker/","/docs/query/getting_started/setup_endpoint/","/docs/query/getting_started/setup_web_client/","/docs/query/getting_started/query_dev_version/","/docs/query/usage/","/docs/query/faq/","/docs/query/advanced/","/docs/query/advanced/basic_auth/","/docs/query/advanced/bindings/","/docs/query/advanced/caching/","/docs/query/advanced/context/","/docs/query/advanced/destination_types/","/docs/query/advanced/explain/","/docs/query/advanced/extension_functions/","/docs/query/advanced/federation/","/docs/query/advanced/graphql_ld/","/docs/query/advanced/hdt/","/docs/query/advanced/logging/","/docs/query/advanced/memento/","/docs/query/advanced/proxying/","/docs/query/advanced/rdfjs/","/docs/query/advanced/rdfjs_querying/","/docs/query/advanced/rdfjs_updating/","/docs/query/advanced/result_formats/","/docs/query/advanced/solid/","/docs/query/advanced/source_types/","/docs/query/advanced/sparql_query_types/","/docs/query/advanced/specifications/","/docs/modify/","/docs/modify/getting_started/","/docs/modify/getting_started/custom_config_cli/","/docs/modify/getting_started/custom_config_app/","/docs/modify/getting_started/custom_init/","/docs/modify/getting_started/custom_web_client/","/docs/modify/getting_started/contribute_actor/","/docs/modify/getting_started/actor_parameter/","/docs/modify/extensions/","/docs/modify/faq/","/docs/modify/advanced/","/docs/modify/advanced/actor_patterns/","/docs/modify/advanced/algebra/","/docs/modify/advanced/architecture_core/","/docs/modify/advanced/architecture_sparql/","/docs/modify/advanced/browser_builds/","/docs/modify/advanced/buses/","/docs/modify/advanced/componentsjs/","/docs/modify/advanced/custom_cli_arguments/","/docs/modify/advanced/expression-evaluator/","/docs/modify/advanced/hypermedia/","/docs/modify/advanced/joins/","/docs/modify/advanced/logging/","/docs/modify/advanced/mediators/","/docs/modify/advanced/metadata/","/docs/modify/advanced/observers/","/docs/modify/advanced/query_operation_result_types/","/docs/modify/advanced/rdf_parsing_serializing/","/docs/modify/advanced/sparqlee/","/docs/modify/advanced/testing/","/docs/modify/benchmarking/","/events/","/events/2019-06-03-eswc/","/events/2019-10-26-iswc/","/events/2022-09-07-association_launch/","/events/2022-09-13-semantics_conference/","/logos/","/research/","/research/amf/","/research/link_traversal/","/research/versioning/","/roadmap/"],"mattersData":{"/about/":{"title":"About","description":"Learn more about Comunica."},"/ask/":{"title":"Ask","description":"Ask questions about Comunica."},"/association/":{"title":"Comunica Association","description":"Organization for ensuring the maintenance and development of the Comunica"},"/association/board/":{"title":"Board of Directors","description":"The board makes decisions regarding the Comunica Association"},"/association/bounty_process/":{"title":"Bounty Procedures","description":"The process for handling bounties on issues"},"/blog/":{"title":"Blog","description":"Blog posts, containing announcements or other news.","blog_index":true},"/blog/2020-08-19-intro/":{"title":"A New Website for Comunica","excerpt":"\nWe're happy to present a brand new website for Comunica! 🎉\n_Don't know that Comunica is? [Read about it here](/about/)._\n\nThis new version contains all **basic information** around Comunica.\nAdditionally, it contains **guides** on how to [query with Comunica](/docs/query/),\nand how to [modify or extend it](/docs/modify/). \n\n"},"/blog/2020-08-24-release_1_16/":{"title":"Release 1.16.0: Full spec compliance, property paths, CSV/TSV, basic auth, and fixes","excerpt":"\nWith the latest release of Comunica, we have achieved the major milestone of **full compliance to the SPARQL 1.1 specification**.\nWhile Comunica has had support for all SPARQL 1.1 operators for a while,\nsome small parts were not always fully handled according to the spec,\nand property paths were not fully supported.\n\nThanks to the help of several students over the summer, these issues have been resolved,\nand all tests from [the SPARQL 1.1 test suite](https://w3c.github.io/rdf-tests/sparql11/) now pass.\n\n"},"/blog/2020-09-25-release_1_17/":{"title":"Hacktoberfest and Release 1.17.0","excerpt":"\nIn this post, we give an overview of\ncontribution possibilities during [Hacktoberfest](https://hacktoberfest.digitalocean.com/),\nand the newly released 1.17.0 version. \n\n"},"/blog/2020-11-02-release_1_18/":{"title":"Release 1.18.0: Smaller Web bundles and Microdata parsing","excerpt":"\nThis post gives a brief overview of the new 1.18.0 release.\n\n"},"/blog/2021-01-18-release_1_19/":{"title":"Release 1.19.0: Simplifications for extensions","excerpt":"\nThe 1.19.0 release focuses on simplications for developing Comunica extension.\nIt contains no significant fixes or changes for end-users.\n\n"},"/blog/2021-03-30-release_1_20/":{"title":"Release 1.20.0: SPARQL Update support","excerpt":"\nWith this new 1.20.0 release, we bring support for [SPARQL Update](https://www.w3.org/TR/sparql11-update/) queries to Comunica.\nNext to this, several enhancements were made to improve developer experience,\nminor new features, and important bug fixes.\n\n"},"/blog/2021-04-27-release_1_21/":{"title":"Release 1.21.0: Hypermedia-based SPARQL Updating","excerpt":"\nThe 1.21.0 version is a smaller release,\nthat mainly introduces the necessary wiring to enable hypermedia-driven SPARQL update querying,\nwhich lays the foundations for highly flexible updating of heterogeneous destinations, such as Solid data pods.\n\nIn other words, this provides the necessary ✨_magic_✨ for updating many different types of things.  \n\n"},"/blog/2021-06-21-comunica_association_bounties/":{"title":"Announcing the Comunica Association, and a Bounty Program","excerpt":"\nIn this post, we announce the creation of the [Comunica Association](/association/),\nand the introduction of a new bounty system using which **organizations** and companies\ncan **fund development** of new features and the fixing of bugs,\nand through which **developers** can take up these bounties and **get paid**.\n\n"},"/blog/2021-08-30-release_1_22/":{"title":"Release 1.22.0: Improved update support, extension functions, and improved CLI handling","excerpt":"\nThe 1.22.0 version features some major additions, and a bunch of smaller internal fixes and performance improvements 🚀!\nThe primary changes that are discussed in this post are\nsupport for more SPARQL update destination types,\nSPARQL extension functions,\nand rewritten CLI handling.\n\n"},"/blog/2021-11-08-comunica_association_members/":{"title":"Comunica Association Memberships","excerpt":"\n[Earlier this year](/blog/2021-06-21-comunica_association_bounties/),\nwe announced the [Comunica Association](/association/),\nwhich is a non-profit organization that aims to make Comunica sustainable in the long term.\nIn this post, we announce the possibility to become a _member_ or _sponsor_ to the association,\nallowing organizations to drive the future roadmap of Comunica.\nWe plan an **official launch in fall 2022**, up until when organizations can choose\nto become a **founding member** of the Comunica Association.\n\n"},"/blog/2022-03-03-release_2_0/":{"title":"Release 2.0.0: A new major release with radical simplifications and performance improvements","excerpt":"\nSince its initial release a couple of years ago, Comunica has grown a lot,\nbut it has always remained fully backwards-compatible with every update.\nHowever, as with every software project, there is sometimes a need to make breaking changes\nso that old mechanisms can be replaced with better, newer ones.\nWith this update, we have aggregated several breaking changes into one large update,\nall of which should improve the lives of users one way or another.\nBelow, the primary changes are listed.\n\n"},"/blog/2022-06-29-release_2_3/":{"title":"Release 2.3.0: Better timeout support and minor enhancements","excerpt":"\nIt's been a while since our latest blog post,\nso here's a small announcement on the latest 2.3.0 release.\n\n"},"/blog/2022-07-14-association_launch/":{"title":"Official launch of the Comunica Association","excerpt":"\nAs previously announced, we will be officially launching the Comunica Association during the fall of this year.\nMore concretely, we are organizing an online launch event on the 7th of September,\nand we will be physically present at the Semantics conference in Vienna the week afterwards.\n\n"},"/blog/2022-08-24-release_2_4/":{"title":"Release 2.4.0: Better browser support and performance improvements","excerpt":"\nWe just released a new minor version of Comunica.\nHere's an overview of the main changes.\n\n"},"/blog/2022-11-09-release_2_5/":{"title":"Release 2.5.0: Fixes, string sources, and HTTP error handling","excerpt":"\nWe just released a new small update. Here's an overview of the main changes.\n\n"},"/blog/2023-05-24-release_2_7/":{"title":"Release 2.7.0: Better date support, better performance over SPARQL endpoints, and internal fixes","excerpt":"\nToday, we released a new minor update, which brings exciting new features, performance improvements, and bug fixes.\nBelow, you can find an overview of the main changes.\n\n"},"/blog/2023-07-04-release_2_8/":{"title":"Release 2.8.0: Support for quoted triples (RDF-star and SPARQL-star)","excerpt":"\nThis minor release focuses on a single but significant new feature: support for quoted triples.\n\n"},"/blog/2024-03-19-release_3_0/":{"title":"Release 3.0: 🔥 Blazingly fast federation over heterogeneous sources","excerpt":"\nMore than 2 years ago, we released [Comunica version 2.0](/blog/2022-03-03-release_2_0/),\nwhich featured many internal and external API changes that significantly simplified its usage.\nToday, we release version 3.0, which focuses more on internal changes, with limited changes to the external API.\nMost of the changes relate to the handling of data sources during query planning,\nwhich allows **more efficient query plans to be produced when querying over federations of heterogeneous sources**.\nThis means that for people using Comunica, the number of breaking changes in this update are very limited.\nThings will simplify be faster in general, and some small convenience features have been added,\nsuch as results being [async iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols). \nTo developers extending Comunica with custom actors, there will be some larger breaking changes.\n\n"},"/blog/2024-05-11-release_3_1/":{"title":"Release 3.1: 🌱 New package with tiny bundle size","excerpt":"\nThe primary addition in this release is the new [`@comunica/query-sparql-rdfjs-lite`](https://www.npmjs.com/package/@comunica/query-sparql-rdfjs-lite) package,\nwhich is optimized for small browser bundle size.\nCurrently, the minified size of this package is 648,88 KB (145,79 KB when gzipped).\nThis is about as small as you can get without removing required functionality from the SPARQL 1.1 spec\nBut if you don't need everything from SPARQL 1.1, it could get much smaller even!\n\n"},"/contribute/":{"title":"Contribute","description":"Contribute to the development of Comunica."},"/docs/":{"title":"Documentation","description":"Overview of all Comunica documentation.","index":true},"/docs/query/":{"title":"Query with Comunica","description":"Learn how to execute queries in different environments. Such as live in the browser, in JavaScript applications, or the CLI.","index":true},"/docs/query/getting_started/":{"title":"Getting started with querying","description":"Basic guides on how to easily get started with querying.","index":true},"/docs/query/getting_started/query_cli/":{"title":"Querying from the command line","description":"Execute SPARQL queries directly from the command line."},"/docs/query/getting_started/update_cli/":{"title":"Updating from the command line","description":"Execute SPARQL Update queries directly from the command line."},"/docs/query/getting_started/query_cli_file/":{"title":"Querying local files from the command line","description":"Execute SPARQL queries over local RDF files directly from the command line."},"/docs/query/getting_started/query_app/":{"title":"Querying in a JavaScript app","description":"Execute SPARQL queries from within your application using the JavaScript API."},"/docs/query/getting_started/update_app/":{"title":"Updating in a JavaScript app","description":"Execute SPARQL Update queries from within your application using the JavaScript API."},"/docs/query/getting_started/query_browser_app/":{"title":"Querying in a JavaScript browser app","description":"Execute SPARQL queries from within your client-side browser application using the JavaScript API."},"/docs/query/getting_started/query_docker/":{"title":"Querying from a Docker container","description":"Execute SPARQL queries within a Docker container."},"/docs/query/getting_started/setup_endpoint/":{"title":"Setting up a SPARQL endpoint","description":"Allow querying over HTTP via the SPARQL protocol"},"/docs/query/getting_started/setup_web_client/":{"title":"Setting up a Web client","description":"Set up a user-friendly static Web page where SPARQL queries can be executed client-side"},"/docs/query/getting_started/query_dev_version/":{"title":"Query using the latest development version","description":"If you want to make use of the latest changes that are not released yet"},"/docs/query/usage/":{"title":"Usage showcase","description":"Examples of where Comunica is used."},"/docs/query/faq/":{"title":"Querying FAQ","description":"Frequently asked questions about using Comunica."},"/docs/query/advanced/":{"title":"Advanced querying","description":"Advanced guides on how to get the most out of Comunica.","index":true},"/docs/query/advanced/basic_auth/":{"title":"HTTP Basic Authentication","description":"Send authenticated HTTP requests by including username and password."},"/docs/query/advanced/bindings/":{"title":"Bindings","description":"Bindings objects are used to represent results of SPARQL SELECT queries"},"/docs/query/advanced/caching/":{"title":"Caching","description":"When remote sources are requested, caching allows them to be reused in the future."},"/docs/query/advanced/context/":{"title":"Passing a context","description":"A context can be passed to a query engine to tweak its runtime settings."},"/docs/query/advanced/destination_types/":{"title":"Destination types","description":"Comunica detects and handles different types of destinations."},"/docs/query/advanced/explain/":{"title":"Explain","description":"Display information about the logical and physical query plan"},"/docs/query/advanced/extension_functions/":{"title":"Extension Functions","description":"Providing implementations for SPARQL extension functions."},"/docs/query/advanced/federation/":{"title":"Federated Querying","description":"Query over the union of data within any number of sources"},"/docs/query/advanced/graphql_ld/":{"title":"GraphQL-LD","description":"Using the power of JSON-LD contexts, GraphQL queries can be executed by Comunica"},"/docs/query/advanced/hdt/":{"title":"HDT","description":"HDT offers highly compressed immutable RDF storage."},"/docs/query/advanced/logging/":{"title":"Logging","description":"Loggers can be set to different logging levels to inspect what Comunica is doing behind the scenes."},"/docs/query/advanced/memento/":{"title":"Memento","description":"Using the Memento protocol, time travel queries can be executed."},"/docs/query/advanced/proxying/":{"title":"HTTP Proxy","description":"All HTTP requests can optionally go through a proxy."},"/docs/query/advanced/rdfjs/":{"title":"RDF/JS","description":"To achieve maximum interoperability between different JavaScript libraries, Comunica builds on top of the RDF/JS specifications."},"/docs/query/advanced/rdfjs_querying/":{"title":"Querying over RDF/JS sources","description":"If the built-in source types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/rdfjs_updating/":{"title":"Updating RDF/JS stores","description":"If the built-in destination types are not sufficient, you can pass a custom JavaScript object implementing a specific interface."},"/docs/query/advanced/result_formats/":{"title":"Result formats","description":"Query results can be serialized in different formats."},"/docs/query/advanced/solid/":{"title":"Solid","description":"Solid – the Web-based decentralization ecosystem – can be queried with Comunica."},"/docs/query/advanced/source_types/":{"title":"Source types","description":"Comunica detects and handles different types of sources."},"/docs/query/advanced/sparql_query_types/":{"title":"SPARQL query types","description":"Different SPARQL query types are possible, such as SELECT, CONSTRUCT, ASK, ..."},"/docs/query/advanced/specifications/":{"title":"Supported specifications","description":"Comunica supports several RDF-related specifications"},"/docs/modify/":{"title":"Modify Comunica","description":"Learn how to configure your own Comunica engine, or extend Comunica by implementing new components.","index":true},"/docs/modify/getting_started/":{"title":"Getting started with modification","description":"Basic guides on how to easily get started with Comunica modification.","index":true},"/docs/modify/getting_started/custom_config_cli/":{"title":"Querying with a custom configuration from the command line","description":"Create a custom configuration of Comunica modules with reduced features, and query with it from the command line."},"/docs/modify/getting_started/custom_config_app/":{"title":"Querying with a custom configuration in a JavaScript app","description":"Create a custom configuration of Comunica modules with changed features, and query with it from within your application using the JavaScript API."},"/docs/modify/getting_started/custom_init/":{"title":"Exposing your custom config as an npm package","description":"Wrap your config in an npm package, and expose a CLI tool and a JavaScript API."},"/docs/modify/getting_started/custom_web_client/":{"title":"Exposing your custom config in a Web client","description":"Demonstrate your query engine as a static Web page."},"/docs/modify/getting_started/contribute_actor/":{"title":"Contributing a new query operation actor to the Comunica repository","description":"Setup a development environment, implement a new actor, and create a pull request."},"/docs/modify/getting_started/actor_parameter/":{"title":"Adding a config parameter to an actor","description":"For an existing actor, add a parameter that can be customized in the config file."},"/docs/modify/extensions/":{"title":"Extensions","description":"Existing extensions of Comunica."},"/docs/modify/faq/":{"title":"Modify FAQ","description":"Frequently asked question about Comunica modification."},"/docs/modify/advanced/":{"title":"Advanced modification","description":"Advanced guides on how to get the most out of Comunica modification.","index":true},"/docs/modify/advanced/actor_patterns/":{"title":"Actor Patterns","description":"Overview of common design patterns for actors"},"/docs/modify/advanced/algebra/":{"title":"Algebra","description":"The internal representation of queries during query execution."},"/docs/modify/advanced/architecture_core/":{"title":"Core Architecture","description":"The low-level software architecture of Comunica for achieving modularity."},"/docs/modify/advanced/architecture_sparql/":{"title":"SPARQL Architecture","description":"The high-level software architecture of Comunica for implementing SPARQL."},"/docs/modify/advanced/browser_builds/":{"title":"Browser builds","description":"All modules in Comunica can be built for the browser."},"/docs/modify/advanced/buses/":{"title":"Buses and Actors","description":"An overview of all buses in Comunica and their actors."},"/docs/modify/advanced/componentsjs/":{"title":"Components.js","description":"Components.js is the dependency injection framework that Comunica uses to wire components via config files."},"/docs/modify/advanced/custom_cli_arguments/":{"title":"Custom CLI arguments","description":"Adding custom arguments to CLI tools"},"/docs/modify/advanced/expression-evaluator/":{"title":"Expression Evaluator","description":"The expression evaluation engine of Comunica."},"/docs/modify/advanced/hypermedia/":{"title":"Hypermedia","description":"Discovery of data source capabilities during query execution."},"/docs/modify/advanced/joins/":{"title":"Joins","description":"Overview of how join operations are handled during query planning"},"/docs/modify/advanced/logging/":{"title":"Logging","description":"How to log messages from within actors."},"/docs/modify/advanced/mediators/":{"title":"Mediators","description":"An overview of all mediators in Comunica."},"/docs/modify/advanced/metadata/":{"title":"Metadata","description":"Information for adaptive planning of query operations."},"/docs/modify/advanced/observers/":{"title":"Observers","description":"Passively observe actions executed by actors on a given bus."},"/docs/modify/advanced/query_operation_result_types/":{"title":"Query operation result types","description":"An overview of the different output types for query operations."},"/docs/modify/advanced/rdf_parsing_serializing/":{"title":"RDF Parsing and Serializing","description":"Basic concepts behind parsing and serializing RDF."},"/docs/modify/advanced/sparqlee/":{"title":"Sparqlee","description":"The SPARQL expression evaluation engine of Comunica. (DEPRECATED)"},"/docs/modify/advanced/testing/":{"title":"Testing","description":"The unit and integration tests that lead to a more stable codebase."},"/docs/modify/benchmarking/":{"title":"Benchmarking","description":"Guidelines on running experiments with Comunica."},"/events/":{"title":"Events","description":"Overview of all Comunica-related events.","index":true,"reverse":true},"/events/2019-06-03-eswc/":{"title":"2019-06-03: Tutorial at ESWC 2019","description":"Comunica tutorial at the ESWC 2019 conference"},"/events/2019-10-26-iswc/":{"title":"2019-10-26: Tutorial at ISWC 2019","description":"Comunica and Solid tutorial at the ISWC 2019 conference"},"/events/2022-09-07-association_launch/":{"title":"2022-09-07: Comunica Association Launch","description":"An online event for the official launch of the Comunica Association"},"/events/2022-09-13-semantics_conference/":{"title":"2022-09-13/15: Semantics Conference","description":"The Comunica Association will have a booth and talk at the Semantics Conference in Vienna"},"/logos/":{"title":"Logos","description":"Free to use logos of Comunica."},"/research/":{"title":"Research","description":"An overview of these research surrounding Comunica."},"/research/amf/":{"title":"Approximate Membership Functions","description":"An overview of research that has been done on AMFs during query execution."},"/research/link_traversal/":{"title":"Link Traversal","description":"An overview of research that has been done on Link-Traversal-based Query Processing."},"/research/versioning/":{"title":"Versioning","description":"An overview of research that has been done on Query Processing for RDF archives."},"/roadmap/":{"title":"Roadmap","description":"The long-term goals of Comunica"}}},"__N_SSG":true}